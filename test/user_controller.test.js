const request = require('supertest');
const express = require('express');
const userRoutes = require('../src/routes/user_routes');
const errorHandler = require('../src/middlewares/error_handle');

const app = express();
app.use(express.json());
app.use('/api/v1/user', userRoutes);
app.use(errorHandler); // Middleware x·ª≠ l√Ω l·ªói chung

describe('üß™ UserController - Login API', () => {
  test('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng', async () => {
    const response = await request(app)
      .post('/api/v1/user/login')
      .send({ username: 'htmn', password: '1' });

    expect(response.status).toBe(200);
    expect(response.body).toHaveProperty('message', '‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng');
  });

  test('‚ùå Thi·∫øu username ho·∫∑c password', async () => {
    const response = await request(app)
      .post('/api/v1/user/login')
      .send({ username: '' });

    expect(response.status).toBe(400);
    expect(response.body).toHaveProperty('error', 'Vui l√≤ng nh·∫≠p username v√† password');
  });

  test('‚ùå User kh√¥ng t·ªìn t·∫°i', async () => {
    const response = await request(app)
      .post('/api/v1/user/login')
      .send({ username: 'user_not_exist', password: '123456' });

    expect(response.status).toBe(404);
    expect(response.body).toHaveProperty('error', 'User kh√¥ng t·ªìn t·∫°i');
  });

  test('‚ùå Sai m·∫≠t kh·∫©u', async () => {
    const response = await request(app)
      .post('/api/v1/user/login')
      .send({ username: 'htmn', password: 'wrongpassword' });

    expect(response.status).toBe(401);
    expect(response.body).toHaveProperty('error', 'M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c');
  });
});